- @title = 'Filters'
%section
  :markdown
    ## Filters

    Akephalos allows you to filter requests originating from the browser and
    return mock responses. This will let you easily filter requests for
    external resources when running your tests, such as Facebook's API and
    Google Analytics.

    Configuring filters in akephalos should be familiar to anyone who has used
    FakeWeb or a similar library. The simplest filter requires only an
    <abbr>HTTP</abbr> method (`:get`, `:post`, `:put`, `:delete`, `:any`) and a
    string or regex to match against.

%aside
  :code
    Akephalos.filter(:get, "http://www.google.com")
    Akephalos.filter(:any, %r{^http://(api\.)?twitter\.com/.*$})

%section
  :markdown
    By default, all filtered requests will return an empty body with a 200
    status code. You can change this by passing additional options to your
    filter call.

%aside
  :code
    Akephalos.filter(:get, "http://google.com/missing",
      :status => 404, :body => "... <h1>Not Found</h1> ...")

    Akephalos.filter(:post, "http://my-api.com/resource.xml",
      :status => 201, :headers => {
        "Content-Type" => "application/xml",
        "Location" => "http://my-api.com/resources/1.xml" },
      :body => {:id => 100}.to_xml)

%section
  :markdown
    And that's really all there is to it! It should be fairly trivial to set up
    filters for the external resources you need to fake. For reference,
    however, here's what we ended up using for our external sources.

    ### Google Analytics

    Google Analytics code is passively applied based on HTML comments, so
    simply returning an empty response body is enough to disable it without
    errors.

%aside
  :code
    Akephalos.filter(:get, "http://www.google-analytics.com/ga.js",
      :headers => {"Content-Type" => "application/javascript"})

%section
  :markdown
    ### Facebook Connect

    When you enable Facebook Connect on your page, the FeatureLoader is
    requested, and then additional resources are loaded when you call
    FB_RequireFeatures. We can therefore return an empty function from our
    filter to disable all Facebook Connect code.

%aside
  :code
    Akephalos.filter(:get, "http://static.ak.connect.facebook.com/js/api_lib/v0.4/FeatureLoader.js.php",
      :headers => {"Content-Type" => "application/javascript"},
      :body => "window.FB_RequireFeatures = function() {};")

%section
  :markdown
    ### Google Maps

    Google Maps requires the most extensive amount of API definitions of the
    three, but these few lines cover everything we've encountered so far.

%aside
  :code
    Akephalos.filter(:get, "http://maps.google.com/maps/api/js?sensor=false",
      :headers => {"Content-Type" => "application/javascript"},
      :body => "window.google = {
                  maps: {
                    LatLng: function(){},
                    Map: function(){},
                    Marker: function(){},
                    MapTypeId: {ROADMAP:1}
                  }
                };")
